# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: minds/qa/question_analysis.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from minds import lang_pb2 as minds_dot_lang__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='minds/qa/question_analysis.proto',
  package='minds.qa',
  syntax='proto3',
  serialized_pb=_b('\n minds/qa/question_analysis.proto\x12\x08minds.qa\x1a\x1bgoogle/protobuf/empty.proto\x1a\x10minds/lang.proto\"@\n\x11QuestionInputText\x12\x0c\n\x04text\x18\x01 \x01(\t\x12\x1d\n\x04lang\x18\x02 \x01(\x0e\x32\x0f.minds.LangCode\"0\n\x1eQuestionAnalysisResultDocument\x12\x0e\n\x06result\x18\x01 \x01(\t\"h\n\x08Provider\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0e\n\x06vendor\x18\x02 \x01(\t\x12\x0f\n\x07version\x18\x03 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x04 \x01(\t\x12\x18\n\x10support_encoding\x18\x05 \x01(\t2\xae\x01\n\x17QuestionAnalysisService\x12\x39\n\x0bGetProvider\x12\x16.google.protobuf.Empty\x1a\x12.minds.qa.Provider\x12X\n\x0fQuestionAnalyze\x12\x1b.minds.qa.QuestionInputText\x1a(.minds.qa.QuestionAnalysisResultDocumentb\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,minds_dot_lang__pb2.DESCRIPTOR,])




_QUESTIONINPUTTEXT = _descriptor.Descriptor(
  name='QuestionInputText',
  full_name='minds.qa.QuestionInputText',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='minds.qa.QuestionInputText.text', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lang', full_name='minds.qa.QuestionInputText.lang', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=93,
  serialized_end=157,
)


_QUESTIONANALYSISRESULTDOCUMENT = _descriptor.Descriptor(
  name='QuestionAnalysisResultDocument',
  full_name='minds.qa.QuestionAnalysisResultDocument',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='result', full_name='minds.qa.QuestionAnalysisResultDocument.result', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=159,
  serialized_end=207,
)


_PROVIDER = _descriptor.Descriptor(
  name='Provider',
  full_name='minds.qa.Provider',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='minds.qa.Provider.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='vendor', full_name='minds.qa.Provider.vendor', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='version', full_name='minds.qa.Provider.version', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='minds.qa.Provider.description', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='support_encoding', full_name='minds.qa.Provider.support_encoding', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=209,
  serialized_end=313,
)

_QUESTIONINPUTTEXT.fields_by_name['lang'].enum_type = minds_dot_lang__pb2._LANGCODE
DESCRIPTOR.message_types_by_name['QuestionInputText'] = _QUESTIONINPUTTEXT
DESCRIPTOR.message_types_by_name['QuestionAnalysisResultDocument'] = _QUESTIONANALYSISRESULTDOCUMENT
DESCRIPTOR.message_types_by_name['Provider'] = _PROVIDER
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

QuestionInputText = _reflection.GeneratedProtocolMessageType('QuestionInputText', (_message.Message,), dict(
  DESCRIPTOR = _QUESTIONINPUTTEXT,
  __module__ = 'minds.qa.question_analysis_pb2'
  # @@protoc_insertion_point(class_scope:minds.qa.QuestionInputText)
  ))
_sym_db.RegisterMessage(QuestionInputText)

QuestionAnalysisResultDocument = _reflection.GeneratedProtocolMessageType('QuestionAnalysisResultDocument', (_message.Message,), dict(
  DESCRIPTOR = _QUESTIONANALYSISRESULTDOCUMENT,
  __module__ = 'minds.qa.question_analysis_pb2'
  # @@protoc_insertion_point(class_scope:minds.qa.QuestionAnalysisResultDocument)
  ))
_sym_db.RegisterMessage(QuestionAnalysisResultDocument)

Provider = _reflection.GeneratedProtocolMessageType('Provider', (_message.Message,), dict(
  DESCRIPTOR = _PROVIDER,
  __module__ = 'minds.qa.question_analysis_pb2'
  # @@protoc_insertion_point(class_scope:minds.qa.Provider)
  ))
_sym_db.RegisterMessage(Provider)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class QuestionAnalysisServiceStub(object):
    """
    message QuizMetaData {
    string question_origin = 1;
    string question_round = 2;
    int32 ui_num = 3;
    string question_form = 4;
    string question_cat = 5;
    repeated string question_options = 6;
    repeated string question_comp_opts = 7;
    repeated string comp_answer_candidates = 8;
    repeated string question_hints = 9;
    }

    message OriginalQuestionInformation {
    OriginalQuestionUnit org_q_unit = 1;
    OriginalSentenceFrame org_s_frame = 2;
    int32 q_decomp_type = 3;
    string str_q_decomp_type = 4;
    repeated vSubQRelation v_sub_q_relation = 5;
    repeated vSubQInfo v_sub_q_info = 6;
    double d_qh_weight = 7;
    }

    message OriginalQuestionUnit {
    string str_question = 1;
    string tagged_question = 2;
    LanguageAnalysisDocument language_document = 3;
    repeated vQT v_qts = 4;
    repeated vQF v_qfs = 5;
    repeated vLAT v_lats = 6;
    repeated vSAT v_sats = 7;
    repeated vSARoot v_sa_roots = 8;
    repeated vTitle v_titles = 9;
    repeated vQTopic v_q_topics = 10;
    repeated vQuotation v_quotations = 11;
    CompTargetInfo comp_target_info = 12;
    repeated AnswerConstraint answer_constraints = 13;
    }

    message LanguageAnalysisDocument {
    string doc_id = 1;
    string dct = 2;
    string category = 3;
    double category_weight = 4;
    MetaInformation meta_info = 5;
    Sentence sentences = 6;
    Entity entities = 7;
    }

    message MetaInformation {

    }

    message Sentence {
    int32 seq = 1;
    string reserve_str = 2;
    string text = 3;
    repeated Word words = 4;
    repeated Morpheme morps = 5;
    repeated MorphemeEval morph_evals = 6;
    repeated NamedEntity nes = 7;
    repeated WordSenseDisambiguation wsds = 8;
    repeated Chunk chunks = 9;
    repeated DependencyParser dependency_parsers = 10;
    repeated PhraseClause phrase_clauses = 11;
    repeated SRL srls = 12;
    repeated SRLInformationExtraction srl_infos = 13;
    repeated Relation relations = 14;
    repeated ZeroAnaphora zas = 15;
    }

    message Word {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Morpheme {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    int32 weight = 5;
    }

    message MorphemeEval {
    int32 seq = 1;
    string target = 2;
    string result = 3;
    int32 word_id = 4;
    int32 m_begin = 5;
    int32 m_end = 6;
    }

    message NamedEntity {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    int32 common_noun = 7;
    }

    message WordSenseDisambiguation {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    string scode = 4;
    double weight = 5;
    int32 position = 6;
    int32 begin = 7;
    int32 end = 8;
    }

    message Chunk {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    }

    message DependencyParser {
    int32 seq = 1;
    string text = 2;
    int32 head = 3;
    string label = 4;
    repeated int32 mods = 5;
    double weight = 6;
    }

    message PhraseElement {
    string text = 1;
    string label = 2;
    int32 begin = 3;
    int32 end = 4;
    string ne_type = 5;
    }

    message PhraseClause {
    int32 seq = 1;
    string label = 2;
    string text = 3;
    int32 begin = 4;
    int32 end = 5;
    int32 key_begin = 6;
    int32 head_phrase = 7;
    repeated int32 sub_phrases = 8;
    double weight = 9;
    repeated PhraseElement elements = 10;
    }

    message SRLArgument {
    string type = 1;
    int32 word_id = 2;
    string text = 3;
    }

    message SRL {
    string verb = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message SRLInformationExtraction {
    string pred = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message RelationProperty {
    string type = 1;
    string value = 2;
    string value_type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Relation {
    string type = 1;
    string trigger = 2;
    string sub = 3;
    string sub_type = 4;
    int32 begin = 5;
    int32 end = 6;
    double weight = 7;
    repeated RelationProperty rel_props = 8;
    }

    message ZeroAnaphora {
    int32 seq = 1;
    int32 verb_wid = 2;
    int32 ant_sid = 3;
    int32 ant_wid = 4;
    string type = 5;
    int32 istitle = 6;
    double weight = 7;
    }

    message Entity {

    }

    message vQT {
    int32 qt = 1;
    string strQTClue = 2;
    int32 uiSentID = 3;
    normQTCLue norm_qt_clue = 4;
    }

    message normQTClue {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vQF {

    }

    message vLAT {
    string strLAT = 1;
    repeated vCompoundLAT v_compound_lats = 2;
    int32 uiSentID = 3;
    string strID = 4;
    double dWeightLAT = 5;
    double dConfidenceLAT = 6;
    repeated vLATMorp v_lat_morps = 7;
    repeated VRuleID v_rule_ids = 8;
    }

    message vCompoundLAT {

    }

    message vLATMorp {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vRuleID {

    }

    message vSAT {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message ExpanseSAT {

    }

    message vSARoots {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message vTitile {
    string strEntity = 1;
    int32 uiSentID = 2;
    int32 atEntityType = 3;
    string strEntityType = 4;
    double dWeightTitle = 5;
    repeated EntityMorp entity_morps = 6;
    repeated EntityInfo entity_infos = 7;
    }

    message EntityMorp {
    int32 id = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message EntityInfo {
    string strNormEntity = 1;
    string strId = 2;
    string strExplain = 3;
    double dWeightEn = 4;
    }

    message vQTopic {

    }

    message vQuotation {

    }

    message CompTargetInfo {
    string strTarget = 1;
    }

    message AnswerConstraint {

    }

    message OriginalSentenceFrame {
    Qif qif = 1;
    FactoidQ fact_id_q = 2;
    }

    message Qif {
    string p_type = 1;
    string q_type = 2;
    string q_structure = 3;
    string q_semantic = 4;
    string q_domain = 5;
    string q_id = 6;
    string sqid = 7;
    string question = 8;
    repeated SatList sat_lists = 9;
    repeated LatList lat_lists = 10;
    string negation = 11;
    repeated SubQSemFrameList sub_q_sem_frame_lists = 12;
    repeated ArgFrameList arg_frame_lists = 13;
    }

    message FactoidQ {
    int32 q_type = 1;
    repeated vNormal v_normals = 2;
    repeated vGuinness v_guinesses = 3;
    }

    message SatList {
    }

    message LatList {
    }

    message SubQSemFrameList {
    }

    message ArgFrameList {
    }

    message vNormal {
    }

    message vGuinness {
    }

    message vSubQRelation {
    }

    message vSubQInfo {
    }

    message vQHypo {
    }

    message QuestionClassification {
    repeated vQDomain v_q_domains = 1;
    repeated AnsQType ans_q_type = 2;
    repeated vSynQType v_syn_q_type = 3;
    repeated vSemQType v_sem_q_type = 4;
    }

    message vQDomain {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;

    }

    message AnsQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSynQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSemQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message AnalyzeResult {
    int32 gen_qif = 1;
    QuizMetaData quiz_meta_data = 2;
    OriginalQuestionInformation original_question_info = 3;
    repeated vQHypo v_q_hypos = 4;
    QuestionClassification question_classification = 5;
    }
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetProvider = channel.unary_unary(
          '/minds.qa.QuestionAnalysisService/GetProvider',
          request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
          response_deserializer=Provider.FromString,
          )
      self.QuestionAnalyze = channel.unary_unary(
          '/minds.qa.QuestionAnalysisService/QuestionAnalyze',
          request_serializer=QuestionInputText.SerializeToString,
          response_deserializer=QuestionAnalysisResultDocument.FromString,
          )


  class QuestionAnalysisServiceServicer(object):
    """
    message QuizMetaData {
    string question_origin = 1;
    string question_round = 2;
    int32 ui_num = 3;
    string question_form = 4;
    string question_cat = 5;
    repeated string question_options = 6;
    repeated string question_comp_opts = 7;
    repeated string comp_answer_candidates = 8;
    repeated string question_hints = 9;
    }

    message OriginalQuestionInformation {
    OriginalQuestionUnit org_q_unit = 1;
    OriginalSentenceFrame org_s_frame = 2;
    int32 q_decomp_type = 3;
    string str_q_decomp_type = 4;
    repeated vSubQRelation v_sub_q_relation = 5;
    repeated vSubQInfo v_sub_q_info = 6;
    double d_qh_weight = 7;
    }

    message OriginalQuestionUnit {
    string str_question = 1;
    string tagged_question = 2;
    LanguageAnalysisDocument language_document = 3;
    repeated vQT v_qts = 4;
    repeated vQF v_qfs = 5;
    repeated vLAT v_lats = 6;
    repeated vSAT v_sats = 7;
    repeated vSARoot v_sa_roots = 8;
    repeated vTitle v_titles = 9;
    repeated vQTopic v_q_topics = 10;
    repeated vQuotation v_quotations = 11;
    CompTargetInfo comp_target_info = 12;
    repeated AnswerConstraint answer_constraints = 13;
    }

    message LanguageAnalysisDocument {
    string doc_id = 1;
    string dct = 2;
    string category = 3;
    double category_weight = 4;
    MetaInformation meta_info = 5;
    Sentence sentences = 6;
    Entity entities = 7;
    }

    message MetaInformation {

    }

    message Sentence {
    int32 seq = 1;
    string reserve_str = 2;
    string text = 3;
    repeated Word words = 4;
    repeated Morpheme morps = 5;
    repeated MorphemeEval morph_evals = 6;
    repeated NamedEntity nes = 7;
    repeated WordSenseDisambiguation wsds = 8;
    repeated Chunk chunks = 9;
    repeated DependencyParser dependency_parsers = 10;
    repeated PhraseClause phrase_clauses = 11;
    repeated SRL srls = 12;
    repeated SRLInformationExtraction srl_infos = 13;
    repeated Relation relations = 14;
    repeated ZeroAnaphora zas = 15;
    }

    message Word {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Morpheme {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    int32 weight = 5;
    }

    message MorphemeEval {
    int32 seq = 1;
    string target = 2;
    string result = 3;
    int32 word_id = 4;
    int32 m_begin = 5;
    int32 m_end = 6;
    }

    message NamedEntity {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    int32 common_noun = 7;
    }

    message WordSenseDisambiguation {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    string scode = 4;
    double weight = 5;
    int32 position = 6;
    int32 begin = 7;
    int32 end = 8;
    }

    message Chunk {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    }

    message DependencyParser {
    int32 seq = 1;
    string text = 2;
    int32 head = 3;
    string label = 4;
    repeated int32 mods = 5;
    double weight = 6;
    }

    message PhraseElement {
    string text = 1;
    string label = 2;
    int32 begin = 3;
    int32 end = 4;
    string ne_type = 5;
    }

    message PhraseClause {
    int32 seq = 1;
    string label = 2;
    string text = 3;
    int32 begin = 4;
    int32 end = 5;
    int32 key_begin = 6;
    int32 head_phrase = 7;
    repeated int32 sub_phrases = 8;
    double weight = 9;
    repeated PhraseElement elements = 10;
    }

    message SRLArgument {
    string type = 1;
    int32 word_id = 2;
    string text = 3;
    }

    message SRL {
    string verb = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message SRLInformationExtraction {
    string pred = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message RelationProperty {
    string type = 1;
    string value = 2;
    string value_type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Relation {
    string type = 1;
    string trigger = 2;
    string sub = 3;
    string sub_type = 4;
    int32 begin = 5;
    int32 end = 6;
    double weight = 7;
    repeated RelationProperty rel_props = 8;
    }

    message ZeroAnaphora {
    int32 seq = 1;
    int32 verb_wid = 2;
    int32 ant_sid = 3;
    int32 ant_wid = 4;
    string type = 5;
    int32 istitle = 6;
    double weight = 7;
    }

    message Entity {

    }

    message vQT {
    int32 qt = 1;
    string strQTClue = 2;
    int32 uiSentID = 3;
    normQTCLue norm_qt_clue = 4;
    }

    message normQTClue {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vQF {

    }

    message vLAT {
    string strLAT = 1;
    repeated vCompoundLAT v_compound_lats = 2;
    int32 uiSentID = 3;
    string strID = 4;
    double dWeightLAT = 5;
    double dConfidenceLAT = 6;
    repeated vLATMorp v_lat_morps = 7;
    repeated VRuleID v_rule_ids = 8;
    }

    message vCompoundLAT {

    }

    message vLATMorp {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vRuleID {

    }

    message vSAT {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message ExpanseSAT {

    }

    message vSARoots {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message vTitile {
    string strEntity = 1;
    int32 uiSentID = 2;
    int32 atEntityType = 3;
    string strEntityType = 4;
    double dWeightTitle = 5;
    repeated EntityMorp entity_morps = 6;
    repeated EntityInfo entity_infos = 7;
    }

    message EntityMorp {
    int32 id = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message EntityInfo {
    string strNormEntity = 1;
    string strId = 2;
    string strExplain = 3;
    double dWeightEn = 4;
    }

    message vQTopic {

    }

    message vQuotation {

    }

    message CompTargetInfo {
    string strTarget = 1;
    }

    message AnswerConstraint {

    }

    message OriginalSentenceFrame {
    Qif qif = 1;
    FactoidQ fact_id_q = 2;
    }

    message Qif {
    string p_type = 1;
    string q_type = 2;
    string q_structure = 3;
    string q_semantic = 4;
    string q_domain = 5;
    string q_id = 6;
    string sqid = 7;
    string question = 8;
    repeated SatList sat_lists = 9;
    repeated LatList lat_lists = 10;
    string negation = 11;
    repeated SubQSemFrameList sub_q_sem_frame_lists = 12;
    repeated ArgFrameList arg_frame_lists = 13;
    }

    message FactoidQ {
    int32 q_type = 1;
    repeated vNormal v_normals = 2;
    repeated vGuinness v_guinesses = 3;
    }

    message SatList {
    }

    message LatList {
    }

    message SubQSemFrameList {
    }

    message ArgFrameList {
    }

    message vNormal {
    }

    message vGuinness {
    }

    message vSubQRelation {
    }

    message vSubQInfo {
    }

    message vQHypo {
    }

    message QuestionClassification {
    repeated vQDomain v_q_domains = 1;
    repeated AnsQType ans_q_type = 2;
    repeated vSynQType v_syn_q_type = 3;
    repeated vSemQType v_sem_q_type = 4;
    }

    message vQDomain {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;

    }

    message AnsQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSynQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSemQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message AnalyzeResult {
    int32 gen_qif = 1;
    QuizMetaData quiz_meta_data = 2;
    OriginalQuestionInformation original_question_info = 3;
    repeated vQHypo v_q_hypos = 4;
    QuestionClassification question_classification = 5;
    }
    """

    def GetProvider(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def QuestionAnalyze(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_QuestionAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetProvider': grpc.unary_unary_rpc_method_handler(
            servicer.GetProvider,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=Provider.SerializeToString,
        ),
        'QuestionAnalyze': grpc.unary_unary_rpc_method_handler(
            servicer.QuestionAnalyze,
            request_deserializer=QuestionInputText.FromString,
            response_serializer=QuestionAnalysisResultDocument.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'minds.qa.QuestionAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaQuestionAnalysisServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """
    message QuizMetaData {
    string question_origin = 1;
    string question_round = 2;
    int32 ui_num = 3;
    string question_form = 4;
    string question_cat = 5;
    repeated string question_options = 6;
    repeated string question_comp_opts = 7;
    repeated string comp_answer_candidates = 8;
    repeated string question_hints = 9;
    }

    message OriginalQuestionInformation {
    OriginalQuestionUnit org_q_unit = 1;
    OriginalSentenceFrame org_s_frame = 2;
    int32 q_decomp_type = 3;
    string str_q_decomp_type = 4;
    repeated vSubQRelation v_sub_q_relation = 5;
    repeated vSubQInfo v_sub_q_info = 6;
    double d_qh_weight = 7;
    }

    message OriginalQuestionUnit {
    string str_question = 1;
    string tagged_question = 2;
    LanguageAnalysisDocument language_document = 3;
    repeated vQT v_qts = 4;
    repeated vQF v_qfs = 5;
    repeated vLAT v_lats = 6;
    repeated vSAT v_sats = 7;
    repeated vSARoot v_sa_roots = 8;
    repeated vTitle v_titles = 9;
    repeated vQTopic v_q_topics = 10;
    repeated vQuotation v_quotations = 11;
    CompTargetInfo comp_target_info = 12;
    repeated AnswerConstraint answer_constraints = 13;
    }

    message LanguageAnalysisDocument {
    string doc_id = 1;
    string dct = 2;
    string category = 3;
    double category_weight = 4;
    MetaInformation meta_info = 5;
    Sentence sentences = 6;
    Entity entities = 7;
    }

    message MetaInformation {

    }

    message Sentence {
    int32 seq = 1;
    string reserve_str = 2;
    string text = 3;
    repeated Word words = 4;
    repeated Morpheme morps = 5;
    repeated MorphemeEval morph_evals = 6;
    repeated NamedEntity nes = 7;
    repeated WordSenseDisambiguation wsds = 8;
    repeated Chunk chunks = 9;
    repeated DependencyParser dependency_parsers = 10;
    repeated PhraseClause phrase_clauses = 11;
    repeated SRL srls = 12;
    repeated SRLInformationExtraction srl_infos = 13;
    repeated Relation relations = 14;
    repeated ZeroAnaphora zas = 15;
    }

    message Word {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Morpheme {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    int32 weight = 5;
    }

    message MorphemeEval {
    int32 seq = 1;
    string target = 2;
    string result = 3;
    int32 word_id = 4;
    int32 m_begin = 5;
    int32 m_end = 6;
    }

    message NamedEntity {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    int32 common_noun = 7;
    }

    message WordSenseDisambiguation {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    string scode = 4;
    double weight = 5;
    int32 position = 6;
    int32 begin = 7;
    int32 end = 8;
    }

    message Chunk {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    }

    message DependencyParser {
    int32 seq = 1;
    string text = 2;
    int32 head = 3;
    string label = 4;
    repeated int32 mods = 5;
    double weight = 6;
    }

    message PhraseElement {
    string text = 1;
    string label = 2;
    int32 begin = 3;
    int32 end = 4;
    string ne_type = 5;
    }

    message PhraseClause {
    int32 seq = 1;
    string label = 2;
    string text = 3;
    int32 begin = 4;
    int32 end = 5;
    int32 key_begin = 6;
    int32 head_phrase = 7;
    repeated int32 sub_phrases = 8;
    double weight = 9;
    repeated PhraseElement elements = 10;
    }

    message SRLArgument {
    string type = 1;
    int32 word_id = 2;
    string text = 3;
    }

    message SRL {
    string verb = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message SRLInformationExtraction {
    string pred = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message RelationProperty {
    string type = 1;
    string value = 2;
    string value_type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Relation {
    string type = 1;
    string trigger = 2;
    string sub = 3;
    string sub_type = 4;
    int32 begin = 5;
    int32 end = 6;
    double weight = 7;
    repeated RelationProperty rel_props = 8;
    }

    message ZeroAnaphora {
    int32 seq = 1;
    int32 verb_wid = 2;
    int32 ant_sid = 3;
    int32 ant_wid = 4;
    string type = 5;
    int32 istitle = 6;
    double weight = 7;
    }

    message Entity {

    }

    message vQT {
    int32 qt = 1;
    string strQTClue = 2;
    int32 uiSentID = 3;
    normQTCLue norm_qt_clue = 4;
    }

    message normQTClue {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vQF {

    }

    message vLAT {
    string strLAT = 1;
    repeated vCompoundLAT v_compound_lats = 2;
    int32 uiSentID = 3;
    string strID = 4;
    double dWeightLAT = 5;
    double dConfidenceLAT = 6;
    repeated vLATMorp v_lat_morps = 7;
    repeated VRuleID v_rule_ids = 8;
    }

    message vCompoundLAT {

    }

    message vLATMorp {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vRuleID {

    }

    message vSAT {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message ExpanseSAT {

    }

    message vSARoots {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message vTitile {
    string strEntity = 1;
    int32 uiSentID = 2;
    int32 atEntityType = 3;
    string strEntityType = 4;
    double dWeightTitle = 5;
    repeated EntityMorp entity_morps = 6;
    repeated EntityInfo entity_infos = 7;
    }

    message EntityMorp {
    int32 id = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message EntityInfo {
    string strNormEntity = 1;
    string strId = 2;
    string strExplain = 3;
    double dWeightEn = 4;
    }

    message vQTopic {

    }

    message vQuotation {

    }

    message CompTargetInfo {
    string strTarget = 1;
    }

    message AnswerConstraint {

    }

    message OriginalSentenceFrame {
    Qif qif = 1;
    FactoidQ fact_id_q = 2;
    }

    message Qif {
    string p_type = 1;
    string q_type = 2;
    string q_structure = 3;
    string q_semantic = 4;
    string q_domain = 5;
    string q_id = 6;
    string sqid = 7;
    string question = 8;
    repeated SatList sat_lists = 9;
    repeated LatList lat_lists = 10;
    string negation = 11;
    repeated SubQSemFrameList sub_q_sem_frame_lists = 12;
    repeated ArgFrameList arg_frame_lists = 13;
    }

    message FactoidQ {
    int32 q_type = 1;
    repeated vNormal v_normals = 2;
    repeated vGuinness v_guinesses = 3;
    }

    message SatList {
    }

    message LatList {
    }

    message SubQSemFrameList {
    }

    message ArgFrameList {
    }

    message vNormal {
    }

    message vGuinness {
    }

    message vSubQRelation {
    }

    message vSubQInfo {
    }

    message vQHypo {
    }

    message QuestionClassification {
    repeated vQDomain v_q_domains = 1;
    repeated AnsQType ans_q_type = 2;
    repeated vSynQType v_syn_q_type = 3;
    repeated vSemQType v_sem_q_type = 4;
    }

    message vQDomain {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;

    }

    message AnsQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSynQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSemQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message AnalyzeResult {
    int32 gen_qif = 1;
    QuizMetaData quiz_meta_data = 2;
    OriginalQuestionInformation original_question_info = 3;
    repeated vQHypo v_q_hypos = 4;
    QuestionClassification question_classification = 5;
    }
    """
    def GetProvider(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def QuestionAnalyze(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaQuestionAnalysisServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """
    message QuizMetaData {
    string question_origin = 1;
    string question_round = 2;
    int32 ui_num = 3;
    string question_form = 4;
    string question_cat = 5;
    repeated string question_options = 6;
    repeated string question_comp_opts = 7;
    repeated string comp_answer_candidates = 8;
    repeated string question_hints = 9;
    }

    message OriginalQuestionInformation {
    OriginalQuestionUnit org_q_unit = 1;
    OriginalSentenceFrame org_s_frame = 2;
    int32 q_decomp_type = 3;
    string str_q_decomp_type = 4;
    repeated vSubQRelation v_sub_q_relation = 5;
    repeated vSubQInfo v_sub_q_info = 6;
    double d_qh_weight = 7;
    }

    message OriginalQuestionUnit {
    string str_question = 1;
    string tagged_question = 2;
    LanguageAnalysisDocument language_document = 3;
    repeated vQT v_qts = 4;
    repeated vQF v_qfs = 5;
    repeated vLAT v_lats = 6;
    repeated vSAT v_sats = 7;
    repeated vSARoot v_sa_roots = 8;
    repeated vTitle v_titles = 9;
    repeated vQTopic v_q_topics = 10;
    repeated vQuotation v_quotations = 11;
    CompTargetInfo comp_target_info = 12;
    repeated AnswerConstraint answer_constraints = 13;
    }

    message LanguageAnalysisDocument {
    string doc_id = 1;
    string dct = 2;
    string category = 3;
    double category_weight = 4;
    MetaInformation meta_info = 5;
    Sentence sentences = 6;
    Entity entities = 7;
    }

    message MetaInformation {

    }

    message Sentence {
    int32 seq = 1;
    string reserve_str = 2;
    string text = 3;
    repeated Word words = 4;
    repeated Morpheme morps = 5;
    repeated MorphemeEval morph_evals = 6;
    repeated NamedEntity nes = 7;
    repeated WordSenseDisambiguation wsds = 8;
    repeated Chunk chunks = 9;
    repeated DependencyParser dependency_parsers = 10;
    repeated PhraseClause phrase_clauses = 11;
    repeated SRL srls = 12;
    repeated SRLInformationExtraction srl_infos = 13;
    repeated Relation relations = 14;
    repeated ZeroAnaphora zas = 15;
    }

    message Word {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Morpheme {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    int32 weight = 5;
    }

    message MorphemeEval {
    int32 seq = 1;
    string target = 2;
    string result = 3;
    int32 word_id = 4;
    int32 m_begin = 5;
    int32 m_end = 6;
    }

    message NamedEntity {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    int32 common_noun = 7;
    }

    message WordSenseDisambiguation {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    string scode = 4;
    double weight = 5;
    int32 position = 6;
    int32 begin = 7;
    int32 end = 8;
    }

    message Chunk {
    int32 seq = 1;
    string text = 2;
    string type = 3;
    int32 begin = 4;
    int32 end = 5;
    double weight = 6;
    }

    message DependencyParser {
    int32 seq = 1;
    string text = 2;
    int32 head = 3;
    string label = 4;
    repeated int32 mods = 5;
    double weight = 6;
    }

    message PhraseElement {
    string text = 1;
    string label = 2;
    int32 begin = 3;
    int32 end = 4;
    string ne_type = 5;
    }

    message PhraseClause {
    int32 seq = 1;
    string label = 2;
    string text = 3;
    int32 begin = 4;
    int32 end = 5;
    int32 key_begin = 6;
    int32 head_phrase = 7;
    repeated int32 sub_phrases = 8;
    double weight = 9;
    repeated PhraseElement elements = 10;
    }

    message SRLArgument {
    string type = 1;
    int32 word_id = 2;
    string text = 3;
    }

    message SRL {
    string verb = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message SRLInformationExtraction {
    string pred = 1;
    int32 sense = 2;
    int32 word_id = 3;
    double weight = 4;
    repeated SRLArgument arguments = 5;
    }

    message RelationProperty {
    string type = 1;
    string value = 2;
    string value_type = 3;
    int32 begin = 4;
    int32 end = 5;
    }

    message Relation {
    string type = 1;
    string trigger = 2;
    string sub = 3;
    string sub_type = 4;
    int32 begin = 5;
    int32 end = 6;
    double weight = 7;
    repeated RelationProperty rel_props = 8;
    }

    message ZeroAnaphora {
    int32 seq = 1;
    int32 verb_wid = 2;
    int32 ant_sid = 3;
    int32 ant_wid = 4;
    string type = 5;
    int32 istitle = 6;
    double weight = 7;
    }

    message Entity {

    }

    message vQT {
    int32 qt = 1;
    string strQTClue = 2;
    int32 uiSentID = 3;
    normQTCLue norm_qt_clue = 4;
    }

    message normQTClue {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vQF {

    }

    message vLAT {
    string strLAT = 1;
    repeated vCompoundLAT v_compound_lats = 2;
    int32 uiSentID = 3;
    string strID = 4;
    double dWeightLAT = 5;
    double dConfidenceLAT = 6;
    repeated vLATMorp v_lat_morps = 7;
    repeated VRuleID v_rule_ids = 8;
    }

    message vCompoundLAT {

    }

    message vLATMorp {
    int32 seq = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message vRuleID {

    }

    message vSAT {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message ExpanseSAT {

    }

    message vSARoots {
    int32 atSAT = 1;
    string strSAT = 2;
    repeated ExpanseSAT expanse_sats = 3;
    double dWeightSAT = 4;
    double dConfidenceSAT = 5;
    repeated VRuleID v_rule_ids = 6;
    }

    message vTitile {
    string strEntity = 1;
    int32 uiSentID = 2;
    int32 atEntityType = 3;
    string strEntityType = 4;
    double dWeightTitle = 5;
    repeated EntityMorp entity_morps = 6;
    repeated EntityInfo entity_infos = 7;
    }

    message EntityMorp {
    int32 id = 1;
    string lemma = 2;
    string type = 3;
    int32 position = 4;
    }

    message EntityInfo {
    string strNormEntity = 1;
    string strId = 2;
    string strExplain = 3;
    double dWeightEn = 4;
    }

    message vQTopic {

    }

    message vQuotation {

    }

    message CompTargetInfo {
    string strTarget = 1;
    }

    message AnswerConstraint {

    }

    message OriginalSentenceFrame {
    Qif qif = 1;
    FactoidQ fact_id_q = 2;
    }

    message Qif {
    string p_type = 1;
    string q_type = 2;
    string q_structure = 3;
    string q_semantic = 4;
    string q_domain = 5;
    string q_id = 6;
    string sqid = 7;
    string question = 8;
    repeated SatList sat_lists = 9;
    repeated LatList lat_lists = 10;
    string negation = 11;
    repeated SubQSemFrameList sub_q_sem_frame_lists = 12;
    repeated ArgFrameList arg_frame_lists = 13;
    }

    message FactoidQ {
    int32 q_type = 1;
    repeated vNormal v_normals = 2;
    repeated vGuinness v_guinesses = 3;
    }

    message SatList {
    }

    message LatList {
    }

    message SubQSemFrameList {
    }

    message ArgFrameList {
    }

    message vNormal {
    }

    message vGuinness {
    }

    message vSubQRelation {
    }

    message vSubQInfo {
    }

    message vQHypo {
    }

    message QuestionClassification {
    repeated vQDomain v_q_domains = 1;
    repeated AnsQType ans_q_type = 2;
    repeated vSynQType v_syn_q_type = 3;
    repeated vSemQType v_sem_q_type = 4;
    }

    message vQDomain {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;

    }

    message AnsQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSynQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message vSemQType {
    int32 q_type_4_chg = 1;
    string str_q_type_4_chg = 2;
    double d_weight_cqt = 3;
    repeated vRuleId v_rule_ids = 4;
    }

    message AnalyzeResult {
    int32 gen_qif = 1;
    QuizMetaData quiz_meta_data = 2;
    OriginalQuestionInformation original_question_info = 3;
    repeated vQHypo v_q_hypos = 4;
    QuestionClassification question_classification = 5;
    }
    """
    def GetProvider(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetProvider.future = None
    def QuestionAnalyze(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    QuestionAnalyze.future = None


  def beta_create_QuestionAnalysisService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('minds.qa.QuestionAnalysisService', 'GetProvider'): google_dot_protobuf_dot_empty__pb2.Empty.FromString,
      ('minds.qa.QuestionAnalysisService', 'QuestionAnalyze'): QuestionInputText.FromString,
    }
    response_serializers = {
      ('minds.qa.QuestionAnalysisService', 'GetProvider'): Provider.SerializeToString,
      ('minds.qa.QuestionAnalysisService', 'QuestionAnalyze'): QuestionAnalysisResultDocument.SerializeToString,
    }
    method_implementations = {
      ('minds.qa.QuestionAnalysisService', 'GetProvider'): face_utilities.unary_unary_inline(servicer.GetProvider),
      ('minds.qa.QuestionAnalysisService', 'QuestionAnalyze'): face_utilities.unary_unary_inline(servicer.QuestionAnalyze),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_QuestionAnalysisService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('minds.qa.QuestionAnalysisService', 'GetProvider'): google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ('minds.qa.QuestionAnalysisService', 'QuestionAnalyze'): QuestionInputText.SerializeToString,
    }
    response_deserializers = {
      ('minds.qa.QuestionAnalysisService', 'GetProvider'): Provider.FromString,
      ('minds.qa.QuestionAnalysisService', 'QuestionAnalyze'): QuestionAnalysisResultDocument.FromString,
    }
    cardinalities = {
      'GetProvider': cardinality.Cardinality.UNARY_UNARY,
      'QuestionAnalyze': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'minds.qa.QuestionAnalysisService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
