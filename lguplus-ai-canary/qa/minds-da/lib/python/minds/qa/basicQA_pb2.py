# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: qa/basicQA.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='qa/basicQA.proto',
  package='minds.qa',
  syntax='proto3',
  serialized_pb=_b('\n\x10qa/basicQA.proto\x12\x08minds.qa\"\xbb\x01\n\rQuestionInput\x12\x0c\n\x04ntop\x18\x01 \x01(\x05\x12\x1c\n\x04type\x18\n \x01(\x0e\x32\x0e.minds.qa.Type\x12\x0e\n\x06\x64omain\x18\x14 \x01(\t\x12\x10\n\x08question\x18\x1e \x01(\t\x12/\n\x04meta\x18( \x03(\x0b\x32!.minds.qa.QuestionInput.MetaEntry\x1a+\n\tMetaEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x1a\n\x08\x44\x42Result\x12\x0e\n\x06\x61nswer\x18\x14 \x01(\t\"E\n\x0cSearchResult\x12\x16\n\x0esearchQuestion\x18\n \x01(\t\x12\x0e\n\x06\x61nswer\x18\x14 \x01(\t\x12\r\n\x05score\x18\x1e \x01(\x02\"t\n\x0c\x41nswerOutput\x12\x10\n\x08question\x18\x01 \x01(\t\x12$\n\x08\x64\x62Result\x18\n \x03(\x0b\x32\x12.minds.qa.DBResult\x12,\n\x0csearchResult\x18\x14 \x03(\x0b\x32\x16.minds.qa.SearchResult*#\n\x04Type\x12\x07\n\x03\x41LL\x10\x00\x12\x06\n\x02\x44\x42\x10\x01\x12\n\n\x06SEARCH\x10\x02\x32M\n\x0e\x42\x61sicQAService\x12;\n\x08Question\x12\x17.minds.qa.QuestionInput\x1a\x16.minds.qa.AnswerOutputb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='minds.qa.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ALL', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DB', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEARCH', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=437,
  serialized_end=472,
)
_sym_db.RegisterEnumDescriptor(_TYPE)

Type = enum_type_wrapper.EnumTypeWrapper(_TYPE)
ALL = 0
DB = 1
SEARCH = 2



_QUESTIONINPUT_METAENTRY = _descriptor.Descriptor(
  name='MetaEntry',
  full_name='minds.qa.QuestionInput.MetaEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='minds.qa.QuestionInput.MetaEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='minds.qa.QuestionInput.MetaEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=175,
  serialized_end=218,
)

_QUESTIONINPUT = _descriptor.Descriptor(
  name='QuestionInput',
  full_name='minds.qa.QuestionInput',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ntop', full_name='minds.qa.QuestionInput.ntop', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='minds.qa.QuestionInput.type', index=1,
      number=10, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='domain', full_name='minds.qa.QuestionInput.domain', index=2,
      number=20, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='question', full_name='minds.qa.QuestionInput.question', index=3,
      number=30, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='meta', full_name='minds.qa.QuestionInput.meta', index=4,
      number=40, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_QUESTIONINPUT_METAENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=31,
  serialized_end=218,
)


_DBRESULT = _descriptor.Descriptor(
  name='DBResult',
  full_name='minds.qa.DBResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='answer', full_name='minds.qa.DBResult.answer', index=0,
      number=20, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=220,
  serialized_end=246,
)


_SEARCHRESULT = _descriptor.Descriptor(
  name='SearchResult',
  full_name='minds.qa.SearchResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='searchQuestion', full_name='minds.qa.SearchResult.searchQuestion', index=0,
      number=10, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='answer', full_name='minds.qa.SearchResult.answer', index=1,
      number=20, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='score', full_name='minds.qa.SearchResult.score', index=2,
      number=30, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=248,
  serialized_end=317,
)


_ANSWEROUTPUT = _descriptor.Descriptor(
  name='AnswerOutput',
  full_name='minds.qa.AnswerOutput',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='question', full_name='minds.qa.AnswerOutput.question', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dbResult', full_name='minds.qa.AnswerOutput.dbResult', index=1,
      number=10, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='searchResult', full_name='minds.qa.AnswerOutput.searchResult', index=2,
      number=20, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=319,
  serialized_end=435,
)

_QUESTIONINPUT_METAENTRY.containing_type = _QUESTIONINPUT
_QUESTIONINPUT.fields_by_name['type'].enum_type = _TYPE
_QUESTIONINPUT.fields_by_name['meta'].message_type = _QUESTIONINPUT_METAENTRY
_ANSWEROUTPUT.fields_by_name['dbResult'].message_type = _DBRESULT
_ANSWEROUTPUT.fields_by_name['searchResult'].message_type = _SEARCHRESULT
DESCRIPTOR.message_types_by_name['QuestionInput'] = _QUESTIONINPUT
DESCRIPTOR.message_types_by_name['DBResult'] = _DBRESULT
DESCRIPTOR.message_types_by_name['SearchResult'] = _SEARCHRESULT
DESCRIPTOR.message_types_by_name['AnswerOutput'] = _ANSWEROUTPUT
DESCRIPTOR.enum_types_by_name['Type'] = _TYPE

QuestionInput = _reflection.GeneratedProtocolMessageType('QuestionInput', (_message.Message,), dict(

  MetaEntry = _reflection.GeneratedProtocolMessageType('MetaEntry', (_message.Message,), dict(
    DESCRIPTOR = _QUESTIONINPUT_METAENTRY,
    __module__ = 'qa.basicQA_pb2'
    # @@protoc_insertion_point(class_scope:minds.qa.QuestionInput.MetaEntry)
    ))
  ,
  DESCRIPTOR = _QUESTIONINPUT,
  __module__ = 'qa.basicQA_pb2'
  # @@protoc_insertion_point(class_scope:minds.qa.QuestionInput)
  ))
_sym_db.RegisterMessage(QuestionInput)
_sym_db.RegisterMessage(QuestionInput.MetaEntry)

DBResult = _reflection.GeneratedProtocolMessageType('DBResult', (_message.Message,), dict(
  DESCRIPTOR = _DBRESULT,
  __module__ = 'qa.basicQA_pb2'
  # @@protoc_insertion_point(class_scope:minds.qa.DBResult)
  ))
_sym_db.RegisterMessage(DBResult)

SearchResult = _reflection.GeneratedProtocolMessageType('SearchResult', (_message.Message,), dict(
  DESCRIPTOR = _SEARCHRESULT,
  __module__ = 'qa.basicQA_pb2'
  # @@protoc_insertion_point(class_scope:minds.qa.SearchResult)
  ))
_sym_db.RegisterMessage(SearchResult)

AnswerOutput = _reflection.GeneratedProtocolMessageType('AnswerOutput', (_message.Message,), dict(
  DESCRIPTOR = _ANSWEROUTPUT,
  __module__ = 'qa.basicQA_pb2'
  # @@protoc_insertion_point(class_scope:minds.qa.AnswerOutput)
  ))
_sym_db.RegisterMessage(AnswerOutput)


_QUESTIONINPUT_METAENTRY.has_options = True
_QUESTIONINPUT_METAENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class BasicQAServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Question = channel.unary_unary(
          '/minds.qa.BasicQAService/Question',
          request_serializer=QuestionInput.SerializeToString,
          response_deserializer=AnswerOutput.FromString,
          )


  class BasicQAServiceServicer(object):

    def Question(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_BasicQAServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Question': grpc.unary_unary_rpc_method_handler(
            servicer.Question,
            request_deserializer=QuestionInput.FromString,
            response_serializer=AnswerOutput.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'minds.qa.BasicQAService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaBasicQAServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Question(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaBasicQAServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Question(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Question.future = None


  def beta_create_BasicQAService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('minds.qa.BasicQAService', 'Question'): QuestionInput.FromString,
    }
    response_serializers = {
      ('minds.qa.BasicQAService', 'Question'): AnswerOutput.SerializeToString,
    }
    method_implementations = {
      ('minds.qa.BasicQAService', 'Question'): face_utilities.unary_unary_inline(servicer.Question),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_BasicQAService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('minds.qa.BasicQAService', 'Question'): QuestionInput.SerializeToString,
    }
    response_deserializers = {
      ('minds.qa.BasicQAService', 'Question'): AnswerOutput.FromString,
    }
    cardinalities = {
      'Question': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'minds.qa.BasicQAService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
